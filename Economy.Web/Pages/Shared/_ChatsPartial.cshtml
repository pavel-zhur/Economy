@using Economy.Engine.Enums
@using Economy.Engine.Models
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using OneShelf.Common
@model IReadOnlyList<Economy.Engine.Models.ChatModel>

@functions {
    private static string GetChatButtonClass(ChatModel chat)
    {
        return chat.Status switch { ChatStatus.Ready => "btn-primary", ChatStatus.Success => "btn-success", ChatStatus.Processing => "btn-warning", ChatStatus.Error => "btn-danger", ChatStatus.FatalError => "btn-danger", ChatStatus.Closed => "btn-success", _ => throw new ArgumentOutOfRangeException() };
    }
}

<input type="hidden" id="default-chat-id" value="@Model.Where(x => x.Status is ChatStatus.Error or ChatStatus.Ready or ChatStatus.Success).WithIndices().OrderByDescending(x => x.x.Messages.Any()).ThenByDescending(x => x.i).AsNullable().FirstOrDefault()?.x.ChatId" />
@foreach (var (chat, i) in Model.WithIndices())
{
    var hotKey = i == Model.Count - 1 ? 0 : i > 8 ? (int?)null : i + 1;
    <div id="chat-@chat.ChatId">
        <button class="btn @GetChatButtonClass(chat) chat-button toggle-chat-button" type="button" id="toggleChatOffcanvas-@chat.ChatId" data-bs-toggle="offcanvas" data-bs-target="#chatOffcanvas-@chat.ChatId" hotKey="@hotKey">
            <span class="hotkey">@hotKey</span>
            <i class="fa-regular @(chat.Messages.Any() ? "fa-comment" : "fas fa-comment-medical")"></i>
        </button>
        <div class="offcanvas offcanvas-chat offcanvas-end" tabindex="-1" id="chatOffcanvas-@chat.ChatId" aria-labelledby="chatOffcanvasLabel-@chat.ChatId" data-bs-scroll="true" data-bs-backdrop="false" aria-modal="true" role="dialog">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="chatOffcanvasLabel-@chat.ChatId">
                    Assistant: @chat.Status
                </h5>
                <div class="ms-auto">
                    @if (chat.Messages.Any())
                    {
                        <button onclick="window.chatsComponent.closeChat('@chat.ChatId')" class="special-close-button btn-close text-reset me-0" aria-label="Close">
                            <i class="fas fa-trash-can fa-lg"></i>
                        </button>
                    }
                    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
            </div>
            <div class="offcanvas-body">
                <div id="chatHistory-@chat.ChatId" class="chat-history">

                    <div id="messagesList-@chat.ChatId">
                        @foreach (var message in chat.Messages)
                        {
                            <div id="message-@message.MessageId" class="message-type-@message.Type message-item">
                                @switch (message.Type)
                                {
                                    case MessageType.UserText:
                                        <span>&mdash; @message.Text <strong class="message-status-@message.Status?.ToString().ToLowerInvariant()">[@message.Status]</strong></span>
                                        break;
                                    case MessageType.UserVoice:
                                        <span>&mdash; @message.Text <strong class="message-status-@message.Status?.ToString().ToLowerInvariant()">[@message.Status]</strong></span>
                                        break;
                                    case MessageType.AssistantText:
                                        <span>&mdash; @message.Text</span>
                                        break;
                                    case MessageType.SystemText:
                                        <span>&mdash; <strong>[@message.SystemMessageSeverity]</strong> @message.Text</span>
                                        break;
                                    case MessageType.ActionLog:
                                        @message.Text
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException(nameof(message.Type), message.Type, "Unexpected message type.");
                                }
                                
                                @if (message.AdditionalData != null)
                                {
                                    <button onclick="alert(this.getAttribute('json-data'))" json-data="@message.AdditionalData">JSON</button>
                                }

                                @if (message.Type is MessageType.UserText or MessageType.UserVoice && message.Status is UserMessageStatus.Thinking or UserMessageStatus.Transcribing)
                                {
                                    <button onclick="window.chatsComponent.tryCancelMessage('@chat.ChatId', '@message.MessageId')">Cancel</button>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="input-group fixed-bottom-input">
                    @{
                        var enabled = chat.Status is ChatStatus.Ready or ChatStatus.Success or ChatStatus.Error;
                    }
                    <form class="d-flex w-100" onsubmit="window.chatsComponent.sendMessage('@chat.ChatId'); return false;">
                        <input type="text" id="messageInput-@chat.ChatId" class="form-control messageInput flex-grow-1 me-2" disabled="@(!enabled)" placeholder="Type a message..." />
                        <button type="submit" id="sendButton-@chat.ChatId" class="sendButton btn btn-primary" disabled="@(!enabled)">Send</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}