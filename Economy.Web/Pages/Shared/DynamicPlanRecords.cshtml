@model Economy.Web.Pages.PlanRecordsModel
@using Economy.Engine.Services
@using Economy.Memory.Containers.State
@using Economy.Memory.Mathematics
@using Economy.Memory.Tools
@using OneShelf.Common
@inject IStateFactory<State> StateFactory

@{
    var state = await StateFactory.GetState();
    var records = PlansMathematics.CreateRecords(state);
}

<input type="hidden" id="latestRevision" value="@state.Events.Count" />

<div>
    @foreach (var record in records.SelectSingle(x => !Model.PlanId.HasValue ? x : x.Where(x => x.PlanIds.Any(x => x.planId == Model.PlanId))).OrderBy(x => Model.Ordering switch
              {
                  PlanRecordsModel.PlanRecordsOrdering.Date => (IComparable)x.Date,
                  PlanRecordsModel.PlanRecordsOrdering.DateDesc => DateTime.MaxValue - x.Date.ToDateTime(),
                  _ => throw new ArgumentOutOfRangeException()
              }))
    {
        <p>@record.ToDetails(state.Repositories, null)</p>
    }
</div>