@model Economy.Web.Pages.TransfersModel
@using Economy.Implementation.Factories
@using Economy.Memory.Containers.State
@using Economy.Memory.Models.State.Root
@inject IReadOnlyStateFactory<State> StateFactory

@{
    var state = await StateFactory.GetState();
}

<partial name="_DynamicUniqueIdentifier" />

@foreach (var transfer in state.Repositories.Transfers.GetAll().OrderBy<Transfer, IComparable>(x => Model.Ordering switch
          {
              TransfersModel.TransfersOrdering.Id => x.Id,
              TransfersModel.TransfersOrdering.IdDesc => -x.Id,
              TransfersModel.TransfersOrdering.Date => x.Date,
              TransfersModel.TransfersOrdering.DateDesc => x.Date.OppositeComparable,
              _ => throw new ArgumentOutOfRangeException()
          }))
{
    <p>
        @transfer.ToDetails(state.Repositories)
    </p>
}