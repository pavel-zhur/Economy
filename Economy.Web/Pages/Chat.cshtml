@page
@model ChatModel
@{
    ViewData["Title"] = "Chat";
}

<h2>Chat Application</h2>

<div id="connectionStatus">Status: <span id="statusText" class="disconnected">Disconnected</span></div>

<div id="chatsContainer"></div>

<div id="newChatContainer">
    <button id="newChatButton">Start New Chat</button>
</div>

@section Scripts {
    <script>
        (() => {
            const connectionStatusText = document.getElementById('statusText');
            const chatsContainer = document.getElementById('chatsContainer');
            const newChatButton = document.getElementById('newChatButton');
            let connection;

            // Global error handlers
            window.onerror = function(message, source, lineno, colno, error) {
                console.error(`Global Error: ${message} at ${source}:${lineno}:${colno}`, error);
            };

            window.onunhandledrejection = function(event) {
                console.error('Unhandled Promise Rejection:', event.reason);
            };

            const initializeConnection = () => {
                try {
                    connection = new signalR.HubConnectionBuilder()
                        .withUrl("/chathub")
                        .withHubProtocol(new signalR.protocols.msgpack.MessagePackHubProtocol())
                        .withAutomaticReconnect({
                            nextRetryDelayInMilliseconds: retryContext => {
                                if (retryContext.elapsedMilliseconds < 60000) {
                                    return Math.random() * 3000;
                                } else {
                                    return null;
                                }
                            }
                        })
                        .configureLogging(signalR.LogLevel.Information)
                        .build();

                    // Event handlers
                    connection.onclose(error => {
                        handleConnectionClose(error);
                    });

                    connection.onreconnecting(error => {
                        handleConnectionReconnecting(error);
                    });

                    connection.onreconnected(connectionId => {
                        handleConnectionReconnected(connectionId);
                    });

                    connection.on('HelloResponse', state => {
                        handleHelloResponse(state);
                    });

                    connection.on('Authenticate', () => {
                        try {
                            location.reload();
                        } catch (err) {
                            console.error('Error in Authenticate handler:', err);
                        }
                    });

                    updateConnectionStatus('Reconnecting');
                    connection.start()
                        .then(() => {
                            updateConnectionStatus('Connected');
                            disableInputs(false);
                            console.info('SignalR connection established.');
                            sendHello();
                        })
                        .catch(err => {
                            console.error('Connection error:', err.toString());
                        });
                } catch (err) {
                    console.error('Error initializing SignalR connection:', err);
                }
            };

            const handleConnectionClose = (error) => {
                updateConnectionStatus('Disconnected');
                disableInputs(true);
                logError('Connection closed', error);
            };

            const handleConnectionReconnecting = (error) => {
                updateConnectionStatus('Reconnecting');
                disableInputs(true);
                logError('Connection reconnecting', error);
            };

            const handleConnectionReconnected = (connectionId) => {
                updateConnectionStatus('Connected');
                disableInputs(false);
                sendHello();
                logInfo('Reconnected with connectionId:', connectionId);
            };

            const handleHelloResponse = (state) => {
                // Handle versioning or other properties if needed in the future
                // Initial render can be handled here if necessary
                renderChatView(state.renderedChats);
            };

            const renderChatView = (renderedView) => {
                try {
                    chatsContainer.innerHTML = renderedView;
                } catch (err) {
                    console.error('Error rendering chat view:', err);
                }
            };

            const updateConnectionStatus = (status) => {
                connectionStatusText.textContent = status;
                const statusClass = status.toLowerCase();
                connectionStatusText.className = '';
                connectionStatusText.classList.add(statusClass);
            };

            const sendHello = () => {
                connection.invoke('Hello')
                    .catch(err => {
                        console.error('Error sending Hello:', err.toString());
                    });
            };

            const disableInputs = (disabled) => {
                const sendButtons = document.querySelectorAll('.sendButton');
                const micButtons = document.querySelectorAll('.micButton');
                sendButtons.forEach(button => button.disabled = disabled);
                micButtons.forEach(button => button.disabled = disabled);
            };

            const newChatButtonHandler = () => {
                try {
                    connection.invoke('CreateNewChat')
                        .catch(err => {
                            console.error('Error creating new chat:', err.toString());
                        });
                } catch (err) {
                    console.error('Error starting a new chat:', err);
                }
            };

            newChatButton.addEventListener('click', newChatButtonHandler);

            const logError = (message, error) => {
                console.error(message, error);
            };

            const logInfo = (message, info) => {
                console.info(message, info);
            };

            // Initialize the connection
            initializeConnection();

            const generateRandomId = () => {
                // Simple function to generate a random ID
                return 'id-' + Math.random().toString(36).substr(2, 9);
            };

            const tryCancelMessage = (chatId, messageId) => {
                connection.invoke('TryCancel', chatId, messageId)
                    .catch(err => {
                        console.error('TryCancel error:', err.toString());
                    });
            };

            const sendMessage = (chatId) => {
                connection.invoke(
                    'SendMessage', 
                    chatId, 
                    generateRandomId(),
                    document.getElementById('messageInput-' + chatId).value)
                    .catch(err => {
                        console.error('Error sending message:', err.toString());
                    });
            };

            const startVoiceRecording = (chatId) => {
                // Implement voice recording logic
            };

            const closeChat = (chatId) => {
                connection.invoke('CloseChat', chatId)
                    .catch(err => {
                        console.error('Error closing chat:', err.toString());
                    });
            };

            window.chatsComponent = {
                tryCancelMessage: tryCancelMessage,
                sendMessage: sendMessage,
                startVoiceRecording: startVoiceRecording,
                closeChat: closeChat
            };

        })();
    </script>
}
<style>
    .chat {
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
    }

        .chat h3 {
            margin-top: 0;
        }

    .messageInput {
        width: 70%;
        padding: 5px;
    }

    .sendButton, .micButton {
        margin-left: 5px;
        padding: 5px 10px;
    }

    #connectionStatus {
        font-weight: bold;
        margin-bottom: 10px;
    }

        #connectionStatus span {
            color: red;
        }

            #connectionStatus span.connected {
                color: green;
            }

            #connectionStatus span.reconnecting {
                color: orange;
            }

    #newChatContainer {
        margin-bottom: 20px;
    }

    .system-message {
        color: gray;
        font-style: italic;
    }

    .own-message {
        color: blue;
    }
</style>
