@model Economy.Web.Pages.ConversionsModel
@using Economy.Implementation.Factories
@using Economy.Memory.Containers.State
@using Economy.Memory.Models.State.Root
@inject IReadOnlyStateFactory<State> StateFactory

@{
    var state = await StateFactory.GetState();
}

<partial name="_DynamicUniqueIdentifier" />

@foreach (var entity in state.Repositories.Conversions.GetAll().OrderBy<Conversion, IComparable>(x => Model.Ordering switch
          {
              ConversionsModel.ConversionsOrdering.Id => x.Id,
              ConversionsModel.ConversionsOrdering.IdDesc => -x.Id,
              ConversionsModel.ConversionsOrdering.DateAndTime => x.DateAndTime,
             ConversionsModel.ConversionsOrdering.DateAndTimeDesc => DateTime.MaxValue - x.DateAndTime,
              _ => throw new ArgumentOutOfRangeException()
          }))
{
    <p>
        @entity.ToDetails(state.Repositories)
    </p>
}
