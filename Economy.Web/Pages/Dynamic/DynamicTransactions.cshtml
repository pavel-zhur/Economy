@model Economy.Web.Pages.TransactionsModel
@using Economy.Memory.Models
@using Economy.Memory.Models.State.Enums
@using Economy.Memory.Models.State.Root
@using Economy.Memory.Tools

@{
    var balance = new EquivalentAmount();
}

<partial name="_DynamicUniqueIdentifier" />

<div class="mt-4">
    <h4>Total Balance: <span class="data-record">@Model.TotalEquivalent.ToDetails()</span></h4>
</div>

<div class="table-fixed-header omt-4">
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Timestamp</th>
                <th>Income</th>
                <th>Expense</th>
                <th>Details</th>
                <th>Equivalent</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in Model.State.Repositories.Transactions.GetAll().OrderBy<Transaction, IComparable>(x => Model.Ordering switch
                      {
                          TransactionsModel.TransactionsOrdering.Id => x.Id,
                          TransactionsModel.TransactionsOrdering.IdDesc => -x.Id,
                          TransactionsModel.TransactionsOrdering.DateAndTime => x.DateAndTime,
                          TransactionsModel.TransactionsOrdering.DateAndTimeDesc => DateTime.MaxValue - x.DateAndTime,
                          _ => throw new ArgumentOutOfRangeException()
                      }))
            {
                <tr>
                    <td class="data-info">@transaction.DateAndTime.WithDayOfWeek()</td>
                    <td class="data-record">
                        @if (transaction.Type == TransactionType.Income)
                        {
                            <span>@transaction.Amounts.ToDetails().ToString(Model.State.Repositories)</span>
                        }
                    </td>
                    <td class="data-record">
                        @if (transaction.Type == TransactionType.Expense)
                        {
                            <span>@transaction.Amounts.ToDetails().ToString(Model.State.Repositories)</span>
                        }
                    </td>
                    <td class="data-info">
                        @transaction.ToDetails().ToString(Model.State.Repositories, nameof(transaction.DateAndTime), nameof(transaction.Amounts), nameof(transaction.PlanScheduleDate), nameof(transaction.PlanSchedulePeriod))
                    </td>
                    <td class="data-record">@transaction.Amounts.ToEquivalentAmount(Model.State.Repositories).ToDetails()</td>
                    <td class="data-record">
                        @{
                            balance = balance.Add(transaction.Amounts.ToEquivalentAmount(Model.State.Repositories), transaction.Type == TransactionType.Expense);
                        }
                        <span>@balance.ToDetails()</span>
                    </td>
                </tr>
            }
            <tr>
                <td><strong>Total: </strong></td>
                <td class="data-info">@Model.TotalIncomesEquivalent.ToDetails()</td>
                <td class="data-info">@Model.TotalExpensesEquivalent.ToDetails()</td>
                <td></td>
                <td></td>
                <td class="data-info">@Model.TotalEquivalent.ToDetails()</td>
            </tr>
        </tbody>
    </table>
</div>